package de.uka.ipd.sdq.workflow.pcm.configurations;

import de.uka.ipd.sdq.workflow.launchconfig.ConstantsContainer;

/**
 * Base class of workflow configuration objects where the corresponding workflow
 * transforms PCM models into some kind of code
 * @author Steffen Becker
 *
 */
public abstract class AbstractCodeGenerationWorkflowRunConfiguration 
extends	AbstractPCMWorkflowRunConfiguration {

	private boolean cleanupCode = false;
	private String pluginID = ConstantsContainer.PLUGIN_ID;
	
	/**
	 * @return Returns whether the generated code should be deleted at the end of the workflow run
	 */
	public boolean shouldDeleteGeneratedCodeOnCleanup() {
		return cleanupCode;
	}

	/** Sets whether the generated code should be deleted at the end of the workflow
	 * @param cleanupCode True if the generated code should be deleted at the end of the workflow
	 */
	public void setCleanupCode(boolean cleanupCode) {
		checkFixed();
		this.cleanupCode = cleanupCode;
	}

	/**
	 * @return Returns the ID of the Eclipse plugin to be generated by the code transformation. This is the name
	 * of the Eclipse project which will contain the generated code
	 */
	public String getPluginID() {
		return pluginID;
	}

	/** Sets the name of the project which will contain the generated code
	 * @param pluginID The name of the project containing the generated code
	 */
	public void setPluginID(String pluginID) {
		checkFixed();
		this.pluginID = pluginID;
	}
	
	
}
