package de.uka.ipd.sdq.workflow.pcm.configurations;

import de.uka.ipd.sdq.workflow.pcm.runconfig.SensitivityAnalysisConfiguration;
import de.uka.ipd.sdq.workflow.launchconfig.ConstantsContainer;

/**
 * Base class of workflow configuration objects where the corresponding workflow
 * transforms PCM models into some kind of code
 * @author Steffen Becker
 *
 */
public abstract class AbstractCodeGenerationWorkflowRunConfiguration 
extends	AbstractPCMWorkflowRunConfiguration {

	private boolean cleanupCode = false;
	private boolean overwriteWithoutAsking = false;
	private String pluginID = ConstantsContainer.PLUGIN_ID;
	private boolean loadMiddlewareAndCompletionFiles = false;
	
	//The sensitivity analysis configurations have been moved here because the PCM2CodeJob 
	//requires the Sensitivity Analysis Config anyways. Also for other code 
	//generation purposes (e.g. Protocom), sensitivity analysis can make sense.
	private SensitivityAnalysisConfiguration sensitivityAnalysisConfiguration = null;
	private boolean sensitivityAnalysisEnabled;
	
	/**
	 * @return Returns whether the generated code should be deleted at the end of the workflow run
	 */
	public boolean shouldDeleteGeneratedCodeOnCleanup() {
		return cleanupCode;
	}

	/** Sets whether the generated code should be deleted at the end of the workflow
	 * @param cleanupCode True if the generated code should be deleted at the end of the workflow
	 */
	public void setCleanupCode(boolean cleanupCode) {
		checkFixed();
		this.cleanupCode = cleanupCode;
	}

	/**
	 * @return Returns the ID of the Eclipse plugin to be generated by the code transformation. This is the name
	 * of the Eclipse project which will contain the generated code
	 */
	public String getPluginID() {
		return pluginID;
	}

	/** Sets the name of the project which will contain the generated code
	 * @param pluginID The name of the project containing the generated code
	 */
	public void setPluginID(String pluginID) {
		checkFixed();
		this.pluginID = pluginID;
	}

	/**
	 * Set whether the code generation may overwrite any existing artifacts without asking the user.
	 * If set to false, the code generation has to ask the user first. 
	 * @param overwriteWithoutAsking
	 */
	public void setOverwriteWithoutAsking(boolean overwriteWithoutAsking) {
		this.overwriteWithoutAsking = overwriteWithoutAsking;
	}

	/**
	 * Get whether the code generation may overwrite any existing artifacts without asking the user.
	 * If set to false, the code generation has to ask the user first. 
	 * @return true if the code can be overwritten without asking, else false 
	 */
	public boolean isOverwriteWithoutAsking() {
		return overwriteWithoutAsking;
	}

	/**
	 * Set whether the middleware files and completion files should be loaded, too. 
	 * This is for example required for the simulation of linking resources. 
	 * @param loadMiddlewareAndCompletionFiles the loadMiddlewareAndCompletionFiles to set
	 */
	public void setLoadMiddlewareAndCompletionFiles(
			boolean loadMiddlewareAndCompletionFiles) {
		this.loadMiddlewareAndCompletionFiles = loadMiddlewareAndCompletionFiles;
	}

	/**
	 * Returns whether the middleware files and completion files should be loaded, too. 
	 * This is for example required for the simulation of linking resources.  
	 * @return the loadMiddlewareAndCompletionFiles
	 */
	public boolean isLoadMiddlewareAndCompletionFiles() {
		return loadMiddlewareAndCompletionFiles;
	}

	public boolean isSensitivityAnalysisEnabled() {
		return sensitivityAnalysisEnabled;
	}

	public SensitivityAnalysisConfiguration getSensitivityAnalysisConfiguration() {
		if (!isSensitivityAnalysisEnabled())
			throw new UnsupportedOperationException("GetSensitivityAnalysisConfiguration is only supported if isSensitivityAnaysisEnabled is true!");
	
		return sensitivityAnalysisConfiguration ;
	}

	public void setSensitivityAnalysisEnabled(boolean sensitivityAnalysisEnabled) {
		checkFixed();
		this.sensitivityAnalysisEnabled = sensitivityAnalysisEnabled;
	}

	public void setSensitivityAnalysisConfiguration(SensitivityAnalysisConfiguration sensitivityConfig) {
		checkFixed();
		this.sensitivityAnalysisConfiguration = sensitivityConfig;
		
	}
	
	
}
